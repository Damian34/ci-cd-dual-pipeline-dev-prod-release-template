# This pipeline works similarly to 'update-version-dev-v01.yml',
# but uses Git commit messages instead of tags.

# To sum up it is kinda expanded way for versioning
# from e.g. X.Y.Z-SNAPSHOT -> X.Y.(Z+1) -> X.Y.(Z+1)-SNAPSHOT
# here are no TAGs used

name: Update Version on Dev v02

on:
  workflow_dispatch: # Allows manually triggering the pipeline by GitHub Actions
    inputs:
      bump:
        description: |
          Select version part to update:
            - patch: update after bug fixes, functionality repairs or tests
            - minor: add new features
            - major: introduce breaking changes (e.g. architecture)
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  update-version-dev-v02:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code from dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0 # fetch full history to go through all commits
          persist-credentials: true  # use GITHUB_TOKEN to push

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Get current version from pom.xml
        id: get_version
        run: |
          FULL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION=${FULL_VERSION%-SNAPSHOT}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Calculate new version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.VERSION }}"
          bump="${{ github.event.inputs.bump }}"
          
          if [[ "$bump" == "patch" ]]; then
            patch=$((patch + 1))
          elif [[ "$bump" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$bump" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          else
            echo "Unknown bump type: $bump"
            exit 1
          fi
          
          NEW_RELEASE_VERSION="${major}.${minor}.${patch}"
          echo "NEW_RELEASE_VERSION=$NEW_RELEASE_VERSION" >> $GITHUB_ENV

      - name: Set release version (remove -SNAPSHOT) and commit
        run: |
          mvn versions:set -DnewVersion=${{ env.NEW_RELEASE_VERSION }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "Prepare release version ${{ env.NEW_RELEASE_VERSION }}"
          git push origin dev

      - name: Calculate new snapshot version
        run: |
          NEW_SNAPSHOT_VERSION="${{ env.NEW_RELEASE_VERSION }}-SNAPSHOT"
          echo "NEW_SNAPSHOT_VERSION=$NEW_SNAPSHOT_VERSION" >> $GITHUB_ENV

      - name: Set new snapshot version in pom.xml and commit
        run: |
          mvn versions:set -DnewVersion=${{ env.NEW_SNAPSHOT_VERSION }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "Prepare next development iteration: ${{ env.NEW_SNAPSHOT_VERSION }}"
          git push origin dev
